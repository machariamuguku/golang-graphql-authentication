# GraphQL schema

# base user
type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
  isEmailVerified: Boolean!
  isPhoneVerified: Boolean!
  createdAt: Time!
  updatedAt: Time!
}

# time scaler import
scalar Time

# user registration input
input RegisterUserInput {
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
  password: String!
  # make sure it starts with https:// or http://
  # or it won't be clickable
  emailVerificationCallBackURL: String!
}

# a field validation errors object
type FieldErrors {
  field: String!
  error: String!
}

# register user payload
type RegisterUserPayload {
  user: User
  jwtToken: String
  statusCode: Int!
  message: String!
  fieldErrors: [FieldErrors]!
}

# user login input
input LoginUserInput {
  email: String!
  password: String!
}

# login user payload
type LoginUserPayload {
  user: User
  jwtToken: String
  statusCode: Int!
  message: String!
  fieldErrors: [FieldErrors]!
}

# verify email payload
type VerifyEmailPayload {
  statusCode: Int!
  message: String!
}

# verify phone payload
type VerifyPhonePayload {
  statusCode: Int!
  message: String!
}

# All queries
type Query {
  loginUser(input: LoginUserInput!): LoginUserPayload!
}

# All mutations
type Mutation {
  registerUser(input: RegisterUserInput!): RegisterUserPayload!
  verifyEmail(emailVerificationToken: String!): VerifyEmailPayload!
  verifyPhone(phoneVerificationToken: String!): VerifyPhonePayload!
}
